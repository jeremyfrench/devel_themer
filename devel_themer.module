<?php

/**
 * Implementation of hook_menu().
 */
function devel_themer_menu() {
  $items = array();

  $items['admin/config/development/devel_themer'] = array(
    'title' => 'Devel Themer',
    'description' => 'Display or hide the textual template log',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devel_themer_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['devel_themer/enable'] = array(
    'title' => 'Devel Themer Enable',
    'page callback' => 'devel_themer_toggle',
    'page arguments' => array(1),
    'access arguments' => array('access devel information'),
    'type' => MENU_CALLBACK,
  );
  $items['devel_themer/disable'] = array(
    'title' => 'Theme Development Enable',
    'page callback' => 'devel_themer_toggle',
    'page arguments' => array(0),
    'access arguments' => array('access devel information'),
    'type' => MENU_CALLBACK,
  );
  $items['devel_themer/variables'] = array(
    'title' => 'Theme Development AJAX variables',
    'page callback' => 'devel_themer_ajax_variables',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access devel information'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * A menu callback used by popup to retrieve variables from cache for a recent page.
 *
 * @param $request_id
 *   A unique key that is sent to the browser in Drupal.Settings.devel_themer_request_id
 * @param $call
 *   The theme call for which you wish to retrieve variables.
 * @return string
 * A chunk of HTML with the devel_print_object() rendering of the variables.
 */
function devel_themer_ajax_variables($request_id, $call) {
  $file = "temporary://devel_themer_$request_id";
  if ($data = unserialize(file_get_contents($file))) {
    $variables = $data[$call]['variables'];
    if (has_krumo()) {
      $content = krumo_ob($variables);
    }
    elseif ($data[$call]['type'] == 'func') {
      $content = $variables;
    }
    else {
      $content =  $variables;
    }
    
  }
  else {
     $content =  'Ajax variables file not found. -'. check_plain($file);
  }

  $commands[] = ajax_command_replace('div.themer-variables','<div class="themer-variables">' . $content . '</div>');
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * A menu callback. Usually called from the devel block.
 *
 * @return void
 */
function devel_themer_toggle($action) {
  $function = $action == 'enable' ? 'module_enable' : 'module_disable';
  $$function('devel_themer');
  drupal_set_message(t('Devel Themer module %action.', array('%action' => $action)));
  drupal_goto();
}

function devel_themer_admin_settings() {
  $form['devel_themer_log'] = array('#type' => 'checkbox',
    '#title' => t('Display theme log'),
    '#default_value' => variable_get('devel_themer_log', FALSE),
    '#description' => t('Display the list of theme templates and theme functions which could have been be used for a given page. The one that was actually used is bolded. This is the same data as the represented in the popup, but all calls are listed in chronological order and can alternately be sorted by time.'),
  );
  return system_settings_form($form);
}


function devel_themer_init() {
  if (user_access('access devel information')) {
    $path = drupal_get_path('module', 'devel_themer');
    $path_to_devel = drupal_get_path('module', 'devel');
    // we inject our HTML after page has loaded we have to add this manually.
    if (has_krumo()) {
      drupal_add_js($path_to_devel. '/krumo/krumo.js');
      drupal_add_css($path_to_devel. '/krumo/skins/default/skin.css');
    }
    drupal_add_css($path .'/devel_themer.css');
    drupal_add_js($path .'/devel_themer.js');
    drupal_add_js('/misc/ajax.js');
    drupal_add_library('system','ui.draggable');
    
    // This needs to happen after all the other CSS.
    drupal_add_css('<!--[if IE]>
    <link href="' . $path .'/devel_themer_ie_fix.css" rel="stylesheet" type="text/css" media="screen" />
<![endif]-->', array('type' => 'inline'));
    devel_themer_popup();

    if (!devel_silent() && variable_get('devel_themer_log', FALSE)) {
      register_shutdown_function('devel_themer_shutdown');
    }
  }
}

function devel_themer_shutdown() {
  print devel_themer_log();
}

/**
 * Show all theme templates and functions that could have been used on this page.
 **/
function devel_themer_log() {
  if (isset($GLOBALS['devel_theme_calls'])) {
    foreach ($GLOBALS['devel_theme_calls'] as $counter => $call) {
      // Sometimes $call is a string.  Not sure why.
      if (is_array($call)) {
        $id = "devel_theme_log_link_$counter";
        $marker = "<div id=\"$id\" class=\"devel_theme_log_link\"></div>\n";

        $used = $call['used'];
        if ($call['type'] == 'func') {
          $name = $call['name']. '()';
          foreach ($call['candidates'] as $item) {
            if ($item == $used) {
              $items[] = "<strong>$used</strong>";
            }
            else {
              $items[] = $item;
            }
          }
        }
        else {
          $name = $call['name'];
          foreach ($call['candidates'] as $item) {
            if ($item == basename($used)) {
              $items[] = "<strong>$used</strong>";
            }
            else {
              $items[] = $item;
            }
          }
        }
        $rows[] = array($call['duration'], $marker. $name, implode(', ', $items));
        unset($items);
      }
    }
    $header = array('Duration (ms)', 'Template/Function', "Candidate template files or function names");
    $output = theme('table', $header, $rows);
    return $output;
  }
}

// Would be nice if theme() broke this into separate function so we don't copy logic here. this one is better - has cache
function devel_themer_get_extension() {
  global $theme_engine;
  static $extension = NULL;

  if (!$extension) {
    $extension_function = $theme_engine .'_extension';
    if (function_exists($extension_function)) {
      $extension = $extension_function();
    }
    else {
      $extension = '.tpl.php';
    }
  }
  return $extension;
}

/**
 * Intercepts all theme calls (including templates), adds to template log, and dispatches to original theme function.
 * This function gets injected into theme registry in devel_exit().
 */
function devel_themer_preprocess(&$variables,$hook) {
  _devel_themer_populate($variables,$hook);
}

function devel_themer_preprocess_field(&$variables,$hook) {
  _devel_themer_populate($variables,$hook);
  $GLOBALS['devel_themer_server'][$variables['#devel_themer']['key']] = array(
    'variables' => $variables,
    'type' => 'test_type',
    );
}

// Pre processing of the item before Render
function devel_themer_pre_render($elements) {

  return _devel_themer_populate($elements);
  
}

// Post processing, and clean up.
function devel_themer_post_render($element_children,$elements) {
  if (isset($elements['#devel_themer'])) {
    $key = $elements['#devel_themer']['key'];
    $duration = timer_stop($key);
    $GLOBALS['devel_theme_calls'][$key]['duration'] = $duration['time'];
    $GLOBALS['devel_themer_server'][$key] = array(
    'variables' => $elements,
    'type' => 'test_type',
    );
  }
 // This is weird but works.
 if($element_children == "" && isset($elements['#markup'])) {
    // In this case markup may have been added manually, add a span arround it.
    return('<span thmr="' . $key .'">'. $elements['#markup'] . '</span>');  
   
  }
  
 return $element_children; 
}


function _devel_themer_populate(&$variables,$hook = null) {
  if (is_array($variables)) {
    if (isset($variables['#devel_themer']['key'])) {
      $key = $variables['#devel_themer']['key'];
    }
    else {
      $counter = devel_counter();
      $key = "thmr_$counter";
      timer_start($key);
      $variables['#devel_themer']['key'] = $key;
    }
    
    // Set up defaults
    if(!isset($GLOBALS['devel_theme_calls'][$key])) {
      $GLOBALS['devel_theme_calls'][$key] = array(
    	'name' => 'unknown',
    	'type' => 'unknown',
    	'duration' => 0,
    	'used' => '',
    	'candidates' => array(),
    	'preprocessors' => array(),
      );
    }
    // Add the class for this item if it is not present
    if (!isset($variables['attributes_array']) || !in_array('thmr',$variables['attributes_array'])) {
      $variables['attributes_array']['thmr'] = $key;
    }
    
    // Populate the information structure with items we can determine.
  
    if ($hook != null) {
      $GLOBALS['devel_theme_calls'][$key]['name'] = $hook;
    }
    elseif (isset($variables['#type'])) {
     $GLOBALS['devel_theme_calls'][$key]['name'] = $variables['#type'];
    } 
    
    if (isset($variables['#theme'])) {
      $GLOBALS['devel_theme_calls'][$key]['name'] = $variables['#theme'];
    }
    
    if (isset($variables['theme_hook_suggestions'])) {
      $GLOBALS['devel_theme_calls'][$key]['candidates'] = $variables['theme_hook_suggestions'];
    }
    
    if(isset($variables['#theme_wrappers'])) {
      _devel_themer_set_processors($variables);
    }
    
    if(isset($variables['elements'])) {
      _devel_themer_set_processors($variables['elements']);
    }
    
  }
  
  return $variables;
}

function _devel_themer_set_processors(&$elements) {
  if(is_array($elements)) {
     foreach(element_children($elements) as $child_key ) {
      
      if(is_array($elements[$child_key])) {
        if(!isset($elements[$child_key]['#pre_render']) 
        || !in_array("devel_themer_pre_render",$elements[$child_key]['#pre_render'])) {
            $elements[$child_key]['#pre_render'][] = "devel_themer_pre_render";
          }
        if(!isset($elements[$child_key]['#post_render']) 
        || !in_array("devel_themer_post_render",$elements[$child_key]['#post_render'])) {
             $elements[$child_key]['#post_render'][] = "devel_themer_post_render";
        }
      
      }
    } 
  }
}

/*
 * Implements hook_page_alter().
 * Add pre and post render functions to elements in the page.
 */

function devel_themer_page_alter(&$page) {
  $page['#pre_render'][] = "devel_themer_pre_render";
   $page['#post_render'][] = "devel_themer_post_render";
}


function devel_themer_append_extension($string) {
  return $string. devel_themer_get_extension();
}

/**
 * For  given theme *function* call, return the ancestry of function names which could have handled the call.
 * This mimics the way the theme registry is built.
 *
 * @param array
 *  A list of theme calls.
 * @return array()
 *   An array of function names.
 **/
function devel_themer_ancestry($calls) {
  global $theme, $theme_engine, $base_theme_info;
  static $prefixes;
  if (!isset($prefixes)) {
    $prefixes[] = 'theme';
    if (isset($base_theme_info)) {
      foreach ($base_theme_info as $base) {
        $prefixes[] = $base->name;
      }
    }
    $prefixes[] = $theme_engine;
    $prefixes[] = $theme;
    $prefixes = array_filter($prefixes);
  }

  foreach ($calls as $call) {
    foreach ($prefixes as $prefix) {
      $candidates[] = $prefix. '_'. $call;
    }
  }
  return array_reverse($candidates);
}

// We save the huge js array here instead of hook_footer so we can catch theme('page')
function devel_themer_exit() {
  // TODO: limit to html pages only $router_item = menu_get_item();
  //delivery_callback
  if (!empty($GLOBALS['devel_theme_calls']) && $_SERVER['REQUEST_METHOD'] != 'POST') {
    // A random string that is sent to the browser. It enables the popup to retrieve params/variables from this request.
    $request_id = uniqid(rand());
    // Write the variables information to the a file. It will be retrieved on demand via AJAX.
    // We used to write this to DB but was getting 'Warning: Got a packet bigger than 'max_allowed_packet' bytes'
    // Writing to temp dir means we don't worry about folder existence/perms and cleanup is free.
   file_save_data(serialize($GLOBALS['devel_themer_server']),"temporary://devel_themer_$request_id",FILE_EXISTS_REPLACE);
    $GLOBALS['devel_theme_calls']['request_id'] = $request_id;
    $GLOBALS['devel_theme_calls']['devel_themer_uri'] = url("devel_themer/variables/$request_id");
    print '<script type="text/javascript">jQuery.extend(Drupal.settings, '.  drupal_json_encode($GLOBALS['devel_theme_calls']) .");</script>\n";
  }
}

function devel_theme_call_marker($name, $counter, $type) {
  $id = "thmr_". $counter;
  return array("<span id=\"$id\" class=\"thmr_call\">", "</span>\n");
}

// just hand out next counter, or return current value
function devel_counter($increment = TRUE) {
  static $counter = 0;
  if ($increment) {
    $counter++;
  }
  return $counter;
}

/**
 * Return the popup template
 * placed here for easy editing
 */
function devel_themer_popup() {
  $majorver = substr(VERSION, 0, strpos(VERSION, '.'));

  // add translatable strings
  drupal_add_js(array('thmrStrings' =>
    array(
      'themer_info' => t('Themer info'),
      'toggle_throbber' => ' <img src="'. base_path() . drupal_get_path('module', 'devel'). '/loader-little.gif' .'" alt="'. t('loading') .'" class="throbber" width="16" height="16" style="display:none" />',
      'parents' => t('Parents: '),
      'function_called' => t('Function called: '),
      'template_called' => t('Template called: '),
      'candidate_files' => t('Candidate template files: '),
      'preprocessors' => t('Preprocess functions: '),
      'candidate_functions' => t('Candidate function names: '),
      'drupal_api_docs' => t('link to Drupal API documentation'),
      'source_link_title' => t('link to source code'),
      'function_arguments' => t('Function Arguments'),
      'template_variables' => t('Template Variables'),
      'file_used' => t('File used: '),
      'duration' => t('Duration: '),
      'api_site' => variable_get('devel_api_site', 'http://api.drupal.org/'),
      'drupal_version' => $majorver,
      'source_link' => url('devel/source', array('query' => array('file' => ''))),
    ))
    , 'setting');

  $title = t('Drupal Themer Information');
  $intro = t('Click on any element to see information about the Drupal theme function or template that created it.');

  $popup = <<<EOT
  <div id="themer-fixeder">
  <div id="themer-relativer">
  <div id="themer-popup">
      <div class="topper">
        <span class="close">X</span> $title
      </div>
      <div id="parents" class="row">

      </div>
      <div class="info row">
        <div class="starter">$intro</div>
        <dl>
          <dt class="key-type">

          </dt>
          <dd class="key">

          </dd>
          <div class="used">
          </div>
          <dt class="candidates-type">

          </dt>
          <dd class="candidates">

          </dd>

          <dt class="preprocessors-type">

          </dt>
          <dd class="preprocessors">

          </dd>

          <div class="duration"></div>
        </dl>
      </div><!-- /info -->
      <div class="attributes row">
      <div class="themer-variables"></div>
      </div><!-- /attributes -->
    </div><!-- /themer-popup -->
    </div>
    </div>
EOT;

  drupal_add_js(array('thmr_popup' => $popup), 'setting');
}

/**
 * Clean up the files we dropped in the temp dir in devel_themer_exit().
 *
 * Limitation: one more devel_themer_exit() will run after this function is
 * called and drop one more file, since hook_exit() is called after the normal
 * page cycle.
 *
 * @return
 *   void.
 */
function devel_themer_cleanup() {
  foreach (array_keys(file_scan_directory('temporary://', '/^devel_themer_/', array('.', '..', 'CVS'), 0, FALSE)) as $file) {
    $fid = db_query('SELECT fid FROM {file_managed} WHERE uri = :uri', array(':uri' => "temporary://$file"))->fetchField();
    if (!empty($fid)) {
      file_delete($file);
    }
  }
}

/**
 * Implement hook_cron() for periodic cleanup.
 * 
 * @return
 *   void.
 */
function devel_themer_cron() {
  devel_themer_cleanup();
}
